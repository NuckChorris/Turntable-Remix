// Generated by CoffeeScript 1.3.3
(function() {

  define(['require', 'underscore', 'backbone'], function(require, _, Backbone) {
    var Room, Song, log;
    window.remixDebug = true;
    log = function() {
      if (remixDebug) {
        return console.log.apply(console, arguments);
      }
    };
    Song = Backbone.Model.extend({
      initialize: function() {
        return log(this);
      }
    });
    Room = Backbone.Model.extend({
      initialize: function(parent) {
        log('New room :D');
        this.nodes = {};
        return this.pendingMsg = [];
      },
      setup: function() {
        log('Setup room');
        $('#top-panel, #right-panel').click(function() {
          return turntable.room.removeGuestListMenu.bind(turntable.room)();
        });
        $('#right-panel').append(util.buildTree(Remix.layouts.bottomBar()));
        $('.guest-list-container').addClass('active');
        $('.guest-list-container, #buddyListContainer, #room-info-tab, .playlist-container').addClass('pane');
        $('body').append(util.buildTree(Remix.layouts.nowPlaying.bind(this)(), this.nodes));
        $('.info .room').append(util.buildTree(Remix.layouts.roomButtons.bind(this)(), this.nodes));
        $('#room-info-tab').appendTo('body');
        $('.pmGreyTop').off('click');
        turntable.buddyList.bodyClickHandler = function() {};
        return turntable.buddyList.toggle = function() {};
      },
      voteButtons: function(e) {
        var buttonClass;
        buttonClass = e.target.className;
        this.pendingMsg.push({
          button: buttonClass,
          msgId: turntable.messageId
        });
        if (buttonClass === 'upvotes') {
          turntable.room.manager.callback('upvote');
        }
        if (buttonClass === 'downvotes') {
          turntable.room.manager.callback('downvote');
        }
        if (buttonClass === 'queues') {
          return turntable.room.manager.callback('add_song_to', 'queue');
        }
      }
    });
    window.Remix = Backbone.Model.extend({
      initialize: function() {
        var ttkeys;
        this.room = new Room(this);
        this.locateRoom();
        ttkeys = Object.keys(turntable);
        turntable.api = turntable[ttkeys[ttkeys.indexOf('getHashedAddr') + 1]];
        return turntable.socket.on('message', this.messageListener.bind(this));
      },
      locateRoom: function() {
        var key;
        if (!turntable.room) {
          for (key in turntable) {
            this.locateObj(turntable, key, 'selfId', 'room');
          }
        }
        if (turntable.room && !turntable.room.manager) {
          for (key in turntable.room) {
            this.locateObj(turntable.room, key, 'myuserid', 'manager');
          }
        }
        if (!turntable.room || !turntable.room.manager) {
          return setTimeout(this.locateRoom.bind(this), 100);
        } else {
          return this.song.trigger('roomLoaded');
        }
      },
      locateObj: function(obj, key, property, type) {
        if (obj[key] && obj[key][property]) {
          obj[type] = obj[key];
          return log('Found: ' + type);
        }
      },
      messageListener: function(data) {
        var pendingMsg;
        data = JSON.parse(data);
        if (data.command) {
          if (data.command in this.remoteEvent) {
            return this.remoteEvent[data.command].bind(this)(data);
          } else {
            return log('TODO: ' + data.command, data);
          }
        } else if (data.room && data.users) {
          log('room info: ', data);
          this.room.setup();
          return this.remoteEvent.newsong.bind(this)(data);
        } else {
          if (this.room) {
            pendingMsg = _.find(this.room.pendingMsg, function(msg) {
              if (msg.msgId === data.msgid) {
                return true;
              }
            });
            if (pendingMsg && data.success) {
              $('.upvotes, .downvotes').removeClass('active');
              return $('.' + pendingMsg.button).addClass('active');
            }
          }
        }
      },
      remoteEvent: {
        registered: function(data) {
          return log('registered', data);
        },
        newsong: function(data) {
          var metadata;
          log('new song', data);
          metadata = data.room.metadata;
          if (metadata.current_song) {
            this.song = new Song(this.room);
            return this.song.set({
              artist: metadata.current_song.metadata.artist,
              title: metadata.current_song.metadata.song,
              album: metadata.current_song.metadata.album,
              bitrate: metadata.current_song.metadata.bitrate || 128
            });
          }
        },
        update_votes: function(data) {
          return this.song.set({
            upvotes: data.room.metadata.upvotes,
            downvotes: data.room.metadata.downvotes
          });
        }
      }
    });
    Remix.layouts = {
      bottomBar: function() {
        var buttonClick;
        buttonClick = function(pane) {
          return {
            event: {
              click: function() {
                if (pane === '#buddyListContainer') {
                  $('#privateChatIcon').addClass('open');
                } else {
                  $('#privateChatIcon').removeClass('open');
                }
                $('#bottom-bar .buttons div').removeClass('active');
                $('.pane').removeClass('active');
                $(this).addClass('active');
                return $(pane).addClass('active');
              }
            }
          };
        };
        return ['div#bottom-bar', {}, ['div.buttons', {}, ['div.playlist', buttonClick('.playlist-container'), ''], ['div.listeners', buttonClick('.guest-list-container'), ''], ['div.buddies', buttonClick('#buddyListContainer'), ''], ['div.roomInfo', buttonClick('#room-info-tab'), ''], ['div.activity', buttonClick('.playlist-container'), ''], ['div.settings', buttonClick('.playlist-container'), '']]];
      },
      activityPanel: ['div.activity-container.panel##activityPanel', {}, ['div.black-right-header', {}, ['div.header-text', {}, 'Activity Log']], ['div.content', {}, ['ul#activity##activities', {}, '']]],
      settingsPanel: function() {
        var menuItems;
        menuItems = ['div.content', {}];
        $('#menuh > div + div').each(function() {
          var item;
          item = [
            'div.btn', {
              event: {
                click: $(this).data('events').click[0].handler
              }
            }, $(this).text()
          ];
          return menuItems.push(item);
        });
        return ['div.settings-container.panel#settingsPanel', {}, ['div.black-right-header', {}, ['div.header-text', {}, 'Settings']], menuItems];
      },
      roomButtons: function() {
        return [
          'span', {}, [
            'div.list', {
              event: {
                click: turntable.room.listRoomsShow
              },
              title: 'List Rooms'
            }, ''
          ], [
            'div.random', {
              event: {
                click: turntable.randomRoom
              },
              title: 'Random Room'
            }, ''
          ]
        ];
      },
      nowPlaying: function() {
        return [
          'div#nowPlaying##nowPlaying', {}, ['div.artist', {}, ['label', {}, 'Artist:'], ['span##artist', {}, '']], ['div.title', {}, ['label', {}, 'Title:'], ['span##title', {}, '']], ['div.album', {}, ['label', {}, 'Album:'], ['span##album', {}, '']], ['div.bitrate', {}, ['label', {}, 'Bitrate:'], ['span##bitrate', {}, '']], [
            'div.stats', {}, [
              'div.upvotes##upvotes', {
                event: {
                  click: this.voteButtons.bind(this)
                }
              }, '0'
            ], [
              'div.downvotes##downvotes', {
                event: {
                  click: this.voteButtons.bind(this)
                }
              }, '0'
            ], [
              'div.queues##queues', {
                event: {
                  click: this.voteButtons.bind(this)
                }
              }, '0'
            ]
          ]
        ];
      }
    };
    return Remix;
  });

}).call(this);
